{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS Proxy",
	"Parameters": {
		"KeyName": {
			"Description": "Existing Amazon EC2 key pair for SSH access to the proxy and web servers",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"SSHLocation": {
			"Description": "IP address range that can access the Nginx proxy server",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
			"Default": "0.0.0.0/0"
		},
       "NginxStatusWhitelist": {
            "Description": "The IP address range that can be used to get the status page",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "172.31.0.0/16",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },				
        "NginxVersion": {
            "Description": "Version of Nginx to use",
            "Type": "String",
            "Default": "1.4.2"
        },
        "NgxPostgresVersion": {
            "Description": "Version of NGX Postgres moudule to use",
            "Type": "String",
            "Default": "0.9"
        },
        "RDSJsonVersion": {
            "Description": "Version of RDSJson moudule to use",
            "Type": "String",
            "Default": "0.15"
        },
        "FormInputVersion": {
            "Description": "Version of FormInput moudule to use",
            "Type": "String",
            "Default": "0.12"
        },		
        "NgxDevelVersion": {
            "Description": "Version of NgxDevelVersion moudule to use",
            "Type": "String",
            "Default": "0.3.0"
        },		
		"DOMAINNAME": {
			"Description": "Name for the Amazon ES domain that this template will create.\nNote: Domain names must start with a lowercase letter and must be between 3 and 28 characters. Valid characters are a-z (lowercase only), 0-9, and â€“ (hyphen).",
			"Type": "String",
			"Default": "centralizedlog"
		},
		"ProxyUsername": {
			"Type": "String",
			"Description": "User name for proxy server connection"
		},
		"S3LoggingBucket": {
			"Description": "S3 Bucket to log to",
			"Type": "String",
			"Default": "fc-bucket1"
		},
        "Database": {
            "Description": "Name of Postgres Database",
            "Type": "String",
			"Default": "postgres"
        },
        "DBUsername": {
            "Description": "Postgres User",
            "Type": "String",
			"Default": "postgres"
        },
        "DBPassword": {
            "Description": "Postgres Password",
            "Type": "String",
			"Default": "Fundingcircledevenv"			
        },		
        "DBHost": {
            "Description": "Postgres host",
            "Type": "String",
			"Default": "pp110ij6zsotbuy.cdwrv8bbea8h.eu-west-1.rds.amazonaws.com"	
			},					
		"ClusterSize": {
      "Type": "String",
      "Default": "Small",
      "AllowedValues": [
        "Small",
        "Medium",
        "Large"
			],
      "Description": "Amazon ES cluster size: small (2 data nodes), medium (4 data nodes), large (6 data nodes)"
    },
		"ProxyPass": {
			"NoEcho": "true",
			"Description": "Password for dashboard access via the proxy server\nNote: Must be six characters or longer, and must contain one uppercase letter, one lower case letter, and a special character (!@#$%^&+)",
			"Type": "String",
			"MinLength": "6",
			"MaxLength": "41",
			"AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&+=])(?=\\S+$).{6,}$",
			"ConstraintDescription": "Must contain at least 1 Upper/Lower alphanumeric characters, number and !@#$%& (Mininum lenght is 6)"
		},
		"VPCID" : {
        "Description" : "VPC ID used to to deploy nginx",
        "Type": "AWS::EC2::VPC::Id",
	    "Default": "vpc-d3347db6"
        },
		"SubnetID1" : {
        "Description" : "Subnet ID used to to deploy nginx 1",
        "Type": "AWS::EC2::Subnet::Id",
	    "Default": "subnet-21c29a56"
        },		
		"SubnetID2" : {
        "Description" : "Subnet ID used to to deploy nginx 2",
        "Type": "AWS::EC2::Subnet::Id",
	    "Default": "subnet-298ebe4c"
        },				
    "SendAnonymousData": {
        "Description": "Anonymous Metrics Request",
        "Type": "String",
        "Default": "Yes",
        "AllowedValues": [
            "Yes",
            "No"
        ]
    }
	},

	"Conditions" : {
	 "SendData" : {"Fn::Equals" : [{"Ref" : "SendAnonymousData"}, "Yes"]},
	 "SizeSmall" : {"Fn::Equals" : [{"Ref": "ClusterSize"}, "Small"]},
	 "SizeMedium" : {"Fn::Equals" : [{"Ref": "ClusterSize"}, "Medium"]},
	 "SizeLarge" : {"Fn::Equals" : [{"Ref": "ClusterSize"}, "Large"]}
  },

	"Metadata": {
		"AWS::CloudFormation::Interface" : {
     "ParameterGroups" : [
      {
        "Label" : { "default" : "Proxy Configuration" },
        "Parameters" : [  "ProxyUsername", "ProxyPass", "SSHLocation", "KeyName" ]
      },
			{
				"Label" : { "default" : "Amazon ES Domain Configuration" },
				"Parameters" : [ "DOMAINNAME", "ClusterSize" ]
			},
			{
				"Label" : { "default" : "Network Settings" },
				"Parameters" : [ "VPCID", "SubnetID1", "SubnetID2" ]
			},
			{
				"Label" : { "default" : "Anonymous Metrics Request" },
				"Parameters" : [ "SendAnonymousData" ]
			}
     ],
     "ParameterLabels" : {
			 "SendAnonymousData" : { "default" : "Send Anonymous Usage Data" },
      "ProxyPass" : { "default" : "Password" },
      "ProxyUsername" : { "default" : "User Name" },
      "DOMAINNAME" : { "default" : "Domain Name" },
      "SSHLocation" : { "default" : "Access CIDR block" },
      "KeyName" : { "default" : "SSH Key" },
			"ClusterSize" : { "default" : "Cluster Size" },
			"VPCID" : {"default" : "VPC ID" },
			"SubnetID1" : { "default" : "1st Subnet Network"},
			"SubnetID2" : { "default" : "2nd Subnet Network"}
     }
   }
	},
	"Mappings": {
		"RegionMap": {
			"us-east-1"				 : { "AMI": "ami-c481fad3" },
			"us-east-2"				 : { "AMI": "ami-58277d3d" },
			"us-west-1"        : { "AMI": "ami-23e8a343" },
			"us-west-2"        : { "AMI": "ami-b04e92d0" },
			"eu-west-1"        : { "AMI": "ami-d41d58a7" },
			"eu-central-1"     : { "AMI": "ami-0044b96f" },
			"ap-southeast-1"   : { "AMI": "ami-7243e611" },
			"ap-northeast-1"   : { "AMI": "ami-1a15c77b" },
			"ap-northeast-2"   : { "AMI": "ami-a04297ce" },
			"ap-southeast-2"   : { "AMI": "ami-55d4e436" }
		},
		"instanceSizing": {
      "elasticsearch": {
        "Small": "t2.micro.elasticsearch",
        "Medium": "r3.xlarge.elasticsearch",
        "Large": "r3.8xlarge.elasticsearch"
      }
    },
		"MasterSizing": {
			"elasticsearch": {
				"Small": "t2.micro.elasticsearch",
				"Medium": "m3.medium.elasticsearch",
				"Large": "m3.medium.elasticsearch"
			}
		},

    "instanceCount": {
      "elasticsearch": {
        "Small": "2",
        "Medium": "3",
        "Large": "10"
      }
    },
    "FilterPatternLookup" : {
      "Common"          : { "Pattern" : "[host, ident, authuser, date, request, status, bytes, referrer, agent]"  },
      "Lambda"          : { "Pattern" : "[timestamp=*Z, request_id=\"*-*\", event]"   },
      "SpaceDelimited"  : { "Pattern" : "[]"   },
      "Other"           : { "Pattern" : ""   }
    }

	},
	"Resources": {
		"ELBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "ELB - Port 80 and 443 access",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}				
				]
			}
		},
		"ELB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internet-facing",
				"LoadBalancerAttributes": [{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "3600"
					},
					{
						"Key": "access_logs.s3.enabled",
						"Value": "true"
					},
					{
						"Key": "access_logs.s3.bucket",
						"Value": {
							"Ref": "S3LoggingBucket"
						}
					}
				],
				"SecurityGroups": [{
					"Fn::GetAtt": ["ELBSecurityGroup", "GroupId"]
				}],
				"Subnets": [ { "Ref" : "SubnetID1" }, {"Ref" : "SubnetID2" }],
				"Name": {
					"Ref": "AWS::StackName"
				}
			}
		},
		"ELBTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 30,
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 3,
				"HealthCheckPath": "/nginx_status",
				"Matcher": {
					"HttpCode": "200"
				},
				"Name": "CentralLoggingTargetGroup",
				"Port": 80,
				"Protocol": "HTTP",
				"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					},
					{
						"Key": "stickiness.enabled",
						"Value": "true"
					},
					{
						"Key": "stickiness.type",
						"Value": "lb_cookie"
					}
				],
				"Targets": [{
						"Id": {
							"Ref": "ProxyServerHost"
						},
						"Port": 80
					},
					{
						"Id": {
							"Ref": "ProxyServerBHost"
						},
						"Port": 80
					},
					{
						"Id": {
							"Ref": "ProxyServerHost"
						},
						"Port": 443
					},
					{
						"Id": {
							"Ref": "ProxyServerBHost"
						},
						"Port": 443
					}					
				],
				"UnhealthyThresholdCount": 5,
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"Listener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": {
						"Ref": "ELBTargetGroup"
					}
				}],
				"LoadBalancerArn": {
					"Ref": "ELB"
				},
				"Port": "80",
				"Protocol": "HTTP"
			}
		},
		"ProxyServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP S access via port 80 and 443",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				},
				{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
					
				},
				 {
					"IpProtocol" : "tcp",
					"FromPort" : "80",
					"ToPort" : "80",
					"SourceSecurityGroupId" : {"Fn::GetAtt": [ "ELBSecurityGroup","GroupId" ]}
				},
				 {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"SourceSecurityGroupId" : {"Fn::GetAtt": [ "ELBSecurityGroup","GroupId" ]}
				}				
				]
			}
		},
		"ProxyServerHost": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "gcc-c++"      : [],
                                "pcre-devel"   : [],
                                "zlib-devel"   : [],
                                "make"         : [],
                                "gd"           : [],
                                "gd-devel"     : [],
                                "openssl"      : [],
                                "openssl-devel": [],
								"postgresql92-devel": []
                            }
                        },
                        "groups": { },
                        "users": {
                            "www" : {
                                "groups" : [ ],
                                "uid" : "50",
                                "homeDir" : "/tmp"
                            }
                        },
                        "sources": {
							"/tmp/ngxpostgres" : { "Fn::Join": [ "", ["http://labs.frickle.com/files/ngx_postgres-", { "Ref" : "NgxPostgresVersion" }, ".tar.gz" ] ] },
                            "/tmp/nginx" : { "Fn::Join": [ "", ["http://nginx.org/download/nginx-", { "Ref" : "NginxVersion" }, ".tar.gz" ] ] },
							"/tmp/rdsjson" : { "Fn::Join": [ "", ["https://github.com/openresty/rds-json-nginx-module/archive/v", { "Ref" : "RDSJsonVersion" }, ".tar.gz" ] ] },
							"/tmp/forminput" : { "Fn::Join": [ "", ["https://github.com/calio/form-input-nginx-module/archive/v", { "Ref" : "FormInputVersion" }, ".tar.gz" ] ] },
							"/tmp/ngxdevel" : { "Fn::Join": [ "", ["https://github.com/simplresty/ngx_devel_kit/archive/v", { "Ref" : "NgxDevelVersion" }, ".tar.gz" ] ] }							
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": { "Fn::Join": [ 										
											"", [
												"[main]\n",
												"stack=", {
												"Ref": "AWS::StackId"
												},
												"\n",
												"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										] ] },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },                            
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": { "Fn::Join": [ "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.NginxInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r NginxInstance ", " --region ", { "Ref": "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ] ] }
                            },
	                        "/tmp/cwlogs/nginx.conf": {
	                            "content": {
	                                "Fn::Join": [
	                                    "",
	                                    [
	                                        "[general]\n",
	                                        "state_file= /var/awslogs/agent-state\n",
	                                        "[/opt/nginx/logs/access.log]\n",
	                                        "file = /opt/nginx/logs/access.log\n",
	                                        "log_group_name = ", {"Ref": "WebServerLogGroup"}, "\n",
	                                        "log_stream_name = {instance_id}/nginx.log\n",
	                                        "datetime_format = %d/%b/%Y:%H:%M:%S"
	                                    ]
	                                ]
	                            },
	                            "mode": "000755",
	                            "owner": "root",
	                            "group": "root"
	                        },														
							"/tmp/nginx.fc.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"events {\n",
											"   worker_connections 1024;\n",
											"}\n",
											"http {\n",
											"   upstream database {\n",
											"#   postgres_server  ", {"Ref": "DBHost"}, " dbname=", {"Ref": "Database"}, "\n",
											"#   user=", {"Ref": "DBUsername"}, " password=", {"Ref": "DBPassword"}, ";\n",
											"   postgres_server  pp110ij6zsotbuy.cdwrv8bbea8h.eu-west-1.rds.amazonaws.com dbname=postgres\n",
											"   user=postgres password=Fundingcircledevenv;\n",											
											"}\n",
											"server {\n",											
											"   listen 80;\n",
											"   listen 443 ssl;\n",											
											"   server_name localhost;\n",		
											"   ssl_certificate /opt/nginx/ssl/cert/nginx.crt;\n",
											"   ssl_certificate_key /opt/nginx/ssl/private/nginx.key;\n",
											"   ssl_session_timeout  5m;\n",
											"   ssl_protocols  SSLv2 SSLv3 TLSv1;\n",
											"   ssl_ciphers  HIGH:!aNULL:!MD5;\n",
											"   ssl_prefer_server_ciphers   on;\n",														
											"location / {\n",
											"   auth_basic 'Restricted';\n",
											"   auth_basic_user_file /opt/nginx/conf/kibana.htpasswd;\n",
											"   proxy_pass_request_headers off;\n",
											"   proxy_set_header Host $host;\n",
											"   proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n",
											"   proxy_pass https://", {
												"Fn::GetAtt": [
													"ElasticsearchAWSLogs",
													"DomainEndpoint"
												]
											},
											";\n",
											"}\n",
											"location /nginx_status {\n",
											"   stub_status on;\n",
											"   allow 127.0.0.1;\n",
											"   allow 172.31.0.0/16;\n",
											"   deny all;\n",
											"}\n",
											"location /entries/ {\n",
											"   postgres_pass     database;\n",
											"   rds_json          on;\n",
											"   postgres_query    HEAD GET  'SELECT * FROM fcnames ORDER BY random() LIMIT 1';\n",
											"   postgres_rewrite  HEAD GET no_rows 403;\n",
											"   allow 127.0.0.1;\n",
											"   allow ", {"Ref": "SSHLocation"}, ";\n",																						
											"}\n",
											"}\n",
											"}\n"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							
						},							
                            "/etc/init.d/nginx": {
                                "content": { "Fn::Join": [ "\n", [
                                            "#!/bin/sh",
                                            "#",
                                            "# nginx - this script starts and stops the nginx daemon",
                                            "#",
                                            "# chkconfig:   - 85 15",
                                            "# description:  Nginx is an HTTP(S) server, HTTP(S) reverse",
                                            "#               proxy and IMAP/POP3 proxy server",
                                            "#",
                                            "# processname: nginx",
                                            "# config:      /opt/nginx/conf/nginx.conf",
                                            "# pidfile:     /opt/nginx/logs/nginx.pid",
                                            "",
                                            "# Source function library.",
                                            ". /etc/rc.d/init.d/functions",
                                            "",
                                            "# Source networking configuration.",
                                            ". /etc/sysconfig/network",
                                            "",
                                            "# Check that networking is up.",
                                            "[ \"$NETWORKING\" = \"no\" ] && exit 0",
                                            "",
                                            "nginx=\"/opt/nginx/sbin/nginx\"",
                                            "prog=$(basename $nginx)",
                                            "",
                                            "NGINX_CONF_FILE=\"/opt/nginx/conf/nginx.conf\"",
                                            "",
                                            "lockfile=/var/lock/subsys/nginx",
                                            "",
                                            "start() {",
                                            "    [ -x $nginx ] || exit 5",
                                            "    [ -f $NGINX_CONF_FILE ] || exit 6",
                                            "    echo -n $\"Starting $prog: \"",
                                            "    daemon $nginx -c $NGINX_CONF_FILE",
                                            "    retval=$?",
                                            "    echo",
                                            "    [ $retval -eq 0 ] && touch $lockfile",
                                            "    return $retval",
                                            "}",
                                            "",
                                            "stop() {",
                                            "    echo -n $\"Stopping $prog: \"",
                                            "    killproc $prog -QUIT",
                                            "    retval=$?",
                                            "    echo",
                                            "    [ $retval -eq 0 ] && rm -f $lockfile",
                                            "    return $retval",
                                            "}",
                                            "",
                                            "restart() {",
                                            "    configtest || return $?",
                                            "    stop",
                                            "    start",
                                            "}",
                                            "",
                                            "reload() {",
                                            "    configtest || return $?",
                                            "    echo -n $\"Reloading $prog: \"",
                                            "    killproc $nginx -HUP",
                                            "    RETVAL=$?",
                                            "    echo",
                                            "}",
                                            "",
                                            "force_reload() {",
                                            "    restart",
                                            "}",
                                            "",
                                            "configtest() {",
                                            "  $nginx -t -c $NGINX_CONF_FILE",
                                            "}",
                                            "",
                                            "rh_status() {",
                                            "    status $prog",
                                            "}",
                                            "",
                                            "rh_status_q() {",
                                            "    rh_status >/dev/null 2>&1",
                                            "}",
                                            "",
                                            "case \"$1\" in",
                                            "    start)",
                                            "        rh_status_q && exit 0",
                                            "        $1",
                                            "        ;;",
                                            "    stop)",
                                            "        rh_status_q || exit 0",
                                            "        $1",
                                            "        ;;",
                                            "    restart|configtest)",
                                            "        $1",
                                            "        ;;",
                                            "    reload)",
                                            "        rh_status_q || exit 7",
                                            "        $1",
                                            "        ;;",
                                            "    force-reload)",
                                            "        force_reload",
                                            "        ;;",
                                            "    status)",
                                            "        rh_status",
                                            "        ;;",
                                            "    condrestart|try-restart)",
                                            "        rh_status_q || exit 0",
                                            "            ;;",
                                            "    *)",
                                            "        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"",
                                            "        exit 2",
                                            "esac"
                                        ] ] },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
							"/tmp/populatedb.sh": {
								"content": {
									"Fn::Join": [
										"", [
                                            "#!/bin/sh\n",								
											"DATABASE=", {"Ref": "Database"}, "\n",
											"USERNAME=", {"Ref": "DBUsername"}, "\n",
											"HOSTNAME=", {"Ref": "DBHost"}, "\n",
											"export PGPASSWORD=", {"Ref": "DBPassword"}, "\n",
											"psql -h $HOSTNAME -U $USERNAME $DATABaSE << EOF\n",	
											"drop table fcnames;\n",											
											"create table fcnames(name varchar);\n",
											"insert into fcnames values ('Olsi');\n",
											"insert into fcnames values ('James');\n",
											"insert into fcnames values ('Peter');\n",
											"select * from fcnames;\n",
											"EOF\n"
										]
									]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},											
                           "/tmp/mkselfssl.sh": {
                                "content": { "Fn::Join": [ "\n", [
                                            "#!/bin/bash",
											"DIR_SSL_CERT=\"/opt/nginx/ssl/cert\"",
											"DIR_SSL_KEY=\"/opt/nginx/ssl/private\"",

											"SSLNAME=$1",
											"SSLDAYS=$2",

											"if [ -z $1 ]; then",
											"  printf \"Enter the SSL Certificate Name:\"",
											"  read SSLNAME",
											"fi",

											"if [ -z $2 ]; then",
											"  printf \"How many days the Certificate will be valid:\"",
											"  read SSLDAYS",
											"fi",

											"if [[ $SSLDAYS == \"\" ]]; then",
											"  $SSLDAYS = 365",
											"fi",

											"echo \"Creating a new Certificate ...\"",
											"openssl genrsa -des3 -passout pass:x -out $SSLNAME.pass.key 2048",
											"openssl rsa -passin pass:x -in $SSLNAME.pass.key -out $SSLNAME.key",
											"rm -f $SSLNAME.pass.key",
											"openssl req -new -key $SSLNAME.key -out $SSLNAME.csr -subj \"/C=UK/ST=Warwickshire/L=Leamington/O=OrgName/OU=IT Department/CN=example.com\"",
											"openssl x509 -req -days 365 -in $SSLNAME.csr -signkey $SSLNAME.key -out $SSLNAME.crt",
											"# Make directory to place SSL Certificate if it doesn't exists",
											"if [[ ! -d $DIR_SSL_KEY ]]; then",
											"  sudo mkdir -p $DIR_SSL_KEY",
											"fi",

											"if [[ ! -d $DIR_SSL_CERT ]]; then",
											"  sudo mkdir -p $DIR_SSL_CERT",
											"fi",

											"# Place SSL Certificate within defined path",
											"sudo cp $SSLNAME.key $DIR_SSL_KEY/$SSLNAME.key",
											"sudo cp $SSLNAME.crt $DIR_SSL_CERT/$SSLNAME.crt",
											"chmod 755 $DIR_SSL_CERT/$SSLNAME.crt",
											"chmod 755 $DIR_SSL_KEY/$SSLNAME.key"
                                        ] ] },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }							
                        },
                        "commands": {                            
                            "b-configure" : {
                                "command" : { "Fn::Join": [ "", ["./configure",
                                        " --prefix=/opt/nginx/ --with-http_stub_status_module --with-http_ssl_module --add-module=/tmp/ngxpostgres/ngx_postgres-", { "Ref" : "NgxPostgresVersion" },
										" --add-module=/tmp/ngxdevel/ngx_devel_kit-", { "Ref" : "NgxDevelVersion" },   										
										" --add-module=/tmp/rdsjson/rds-json-nginx-module-", { "Ref" : "RDSJsonVersion" },
										" --add-module=/tmp/forminput/form-input-nginx-module-", { "Ref" : "FormInputVersion" },										                                     
                                        " > /tmp/nginx-configure.log 2>&1"
                                    ] ]
							
                                },
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            },
                            "c-make" : {
                                "command" : "make",
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            },
                            "d-install" : {
                                "command" : "make install",
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            }
                        },
                        "services": {
                            "sysvinit" : {
                                "nginx" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : ["/opt/nginx/conf/nginx.conf"],
                                    "sources" : ["/var/www/html"]
                                }
                            }
                        }
                    }
                }
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap", {
							"Ref": "AWS::Region"
						},
						"AMI"
					]
				},
				"NetworkInterfaces": [{
					"GroupSet": [{
						"Ref": "ProxyServerSecurityGroup"
					}],
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"DeleteOnTermination": "true",
					"SubnetId": {
						"Ref": "SubnetID1"
					}
				}],
				"KeyName": {
					"Ref": "KeyName"
				},
				"Tags" : [ {"Key" : "Name", "Value" : "Proxy Server 1" } ],
				"InstanceType": "t2.micro",
				"IamInstanceProfile": { "Ref": "LogRoleInstanceProfile" },
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -xe\n",

								"# Get the latest CloudFormation package\n",
								"yum update -y aws-cfn-bootstrap\n",

								"# Start cfn-init\n",
								"/opt/aws/bin/cfn-init -s ", {
									"Ref": "AWS::StackId"
								}, " -r ProxyServerHost ", " --region ", {
									"Ref": "AWS::Region"
								},
								" || error_exit 'Failed to run cfn-init'\n",

								"# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata\n",
								"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

								"# Create a new username/password for nginx\n",
								"printf ", {
									"Ref": "ProxyUsername"
								},
								":`openssl passwd -apr1 ", {
									"Ref": "ProxyPass"
								},
								"` >> /opt/nginx/conf/kibana.htpasswd\n",
								"# Remove the default location from nginx config\n",
							    "cp -p /tmp/nginx.fc.conf /opt/nginx/conf/nginx.conf\n",								
								
								"# Generate self signed certs\n",
								"/tmp/mkselfssl.sh nginx 365\n",
								"# Populate the database\n",
								"/tmp/populatedb.sh\n",
								"service nginx restart\n",
	                            "# Get the CloudWatch Logs agent\n",
	                            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

	                            "# Install the CloudWatch Logs agent\n",
	                            "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/nginx.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
							    "# pre-warm the nginx logs\n",
							    "curl 127.0.0.1\n",
         					    "curl 127.0.0.1/404\n",								
								"# All done so signal success\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource ProxyServerHost ",
								"         --region ", {
									"Ref": "AWS::Region"
								}, "\n"
							]
						]
					}
				}
			}
		},
		"ProxyAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
				"Namespace": "AWS/EC2" ,
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "15",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
				"Dimensions": [{"Name": "InstanceId","Value": {"Ref": "ProxyServerHost"}}]
			}
		},
		"ProxyServerBHost": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "gcc-c++"      : [],
                                "pcre-devel"   : [],
                                "zlib-devel"   : [],
                                "make"         : [],
                                "gd"           : [],
                                "gd-devel"     : [],
                                "openssl"      : [],
                                "openssl-devel": [],
								"postgresql92-devel": []
                            }
                        },
                        "groups": { },
                        "users": {
                            "www" : {
                                "groups" : [ ],
                                "uid" : "50",
                                "homeDir" : "/tmp"
                            }
                        },
                        "sources": {
							"/tmp/ngxpostgres" : { "Fn::Join": [ "", ["http://labs.frickle.com/files/ngx_postgres-", { "Ref" : "NgxPostgresVersion" }, ".tar.gz" ] ] },
                            "/tmp/nginx" : { "Fn::Join": [ "", ["http://nginx.org/download/nginx-", { "Ref" : "NginxVersion" }, ".tar.gz" ] ] },
							"/tmp/rdsjson" : { "Fn::Join": [ "", ["https://github.com/openresty/rds-json-nginx-module/archive/v", { "Ref" : "RDSJsonVersion" }, ".tar.gz" ] ] },
							"/tmp/forminput" : { "Fn::Join": [ "", ["https://github.com/calio/form-input-nginx-module/archive/v", { "Ref" : "FormInputVersion" }, ".tar.gz" ] ] },
							"/tmp/ngxdevel" : { "Fn::Join": [ "", ["https://github.com/simplresty/ngx_devel_kit/archive/v", { "Ref" : "NgxDevelVersion" }, ".tar.gz" ] ] }							
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": { "Fn::Join": [ 										
											"", [
												"[main]\n",
												"stack=", {
												"Ref": "AWS::StackId"
												},
												"\n",
												"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										] ] },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },                            
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": { "Fn::Join": [ "", [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.NginxInstance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r NginxInstance ", " --region ", { "Ref": "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ] ] }
                            },
	                        "/tmp/cwlogs/nginx.conf": {
	                            "content": {
	                                "Fn::Join": [
	                                    "",
	                                    [
	                                        "[general]\n",
	                                        "state_file= /var/awslogs/agent-state\n",
	                                        "[/opt/nginx/logs/access.log]\n",
	                                        "file = /opt/nginx/logs/access.log\n",
	                                        "log_group_name = ", {"Ref": "WebServerLogGroup"}, "\n",
	                                        "log_stream_name = {instance_id}/nginx.log\n",
	                                        "datetime_format = %d/%b/%Y:%H:%M:%S"
	                                    ]
	                                ]
	                            },
	                            "mode": "000755",
	                            "owner": "root",
	                            "group": "root"
	                        },		
							"/tmp/populatedb.sh": {
								"content": {
									"Fn::Join": [
										"", [
                                            "#!/bin/sh\n",								
											"DATABASE=", {"Ref": "Database"}, "\n",
											"USERNAME=", {"Ref": "DBUsername"}, "\n",
											"HOSTNAME=", {"Ref": "DBHost"}, "\n",
											"export PGPASSWORD=", {"Ref": "DBPassword"}, "\n",
											"psql -h $HOSTNAME -U $USERNAME $DATABaSE << EOF\n",	
											"drop table fcnames;\n",											
											"create table fcnames(name varchar);\n",
											"insert into fcnames values ('Olsi');\n",
											"insert into fcnames values ('James');\n",
											"insert into fcnames values ('Peter');\n",
											"select * from fcnames;\n",
											"EOF\n"
										]
									]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},																		
							"/tmp/nginx.fc.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"events {\n",
											"   worker_connections 1024;\n",
											"}\n",
											"http {\n",
											"   upstream database {\n",
											"#   postgres_server  ", {"Ref": "DBHost"}, " dbname=", {"Ref": "Database"}, "\n",
											"#   user=", {"Ref": "DBUsername"}, " password=", {"Ref": "DBPassword"}, ";\n",
											"   postgres_server  pp110ij6zsotbuy.cdwrv8bbea8h.eu-west-1.rds.amazonaws.com dbname=postgres\n",
											"   user=postgres password=Fundingcircledevenv;\n",				
											"}\n",
											"server {\n",											
											"   listen 80;\n",
											"   listen 443 ssl;\n",											
											"   server_name localhost;\n",		
											"   ssl_certificate /opt/nginx/ssl/cert/nginx.crt;\n",
											"   ssl_certificate_key /opt/nginx/ssl/private/nginx.key;\n",
											"   ssl_session_timeout  5m;\n",
											"   ssl_protocols  SSLv2 SSLv3 TLSv1;\n",
											"   ssl_ciphers  HIGH:!aNULL:!MD5;\n",
											"   ssl_prefer_server_ciphers   on;\n",														
											"location / {\n",
											"   auth_basic 'Restricted';\n",
											"   auth_basic_user_file /opt/nginx/conf/kibana.htpasswd;\n",
											"   proxy_pass_request_headers off;\n",
											"   proxy_set_header Host $host;\n",
											"   proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n",
											"   proxy_pass https://", {
												"Fn::GetAtt": [
													"ElasticsearchAWSLogs",
													"DomainEndpoint"
												]
											},
											";\n",
											"}\n",
											"location /nginx_status {\n",
											"   stub_status on;\n",
											"   allow 127.0.0.1;\n",
											"   allow 172.31.0.0/16;\n",
											"   deny all;\n",
											"}\n",
											"location /entries/ {\n",
											"   postgres_pass     database;\n",
											"   rds_json          on;\n",
											"   postgres_query    HEAD GET  'SELECT * FROM fcnames ORDER BY random() LIMIT 1';\n",
											"   postgres_rewrite  HEAD GET no_rows 403;\n",
											"   allow 127.0.0.1;\n",
											"   allow ", {"Ref": "SSHLocation"}, ";\n",																						
											"}\n",
											"}\n",
											"}\n"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							
						},							
                            "/etc/init.d/nginx": {
                                "content": { "Fn::Join": [ "\n", [
                                            "#!/bin/sh",
                                            "#",
                                            "# nginx - this script starts and stops the nginx daemon",
                                            "#",
                                            "# chkconfig:   - 85 15",
                                            "# description:  Nginx is an HTTP(S) server, HTTP(S) reverse",
                                            "#               proxy and IMAP/POP3 proxy server",
                                            "#",
                                            "# processname: nginx",
                                            "# config:      /opt/nginx/conf/nginx.conf",
                                            "# pidfile:     /opt/nginx/logs/nginx.pid",
                                            "",
                                            "# Source function library.",
                                            ". /etc/rc.d/init.d/functions",
                                            "",
                                            "# Source networking configuration.",
                                            ". /etc/sysconfig/network",
                                            "",
                                            "# Check that networking is up.",
                                            "[ \"$NETWORKING\" = \"no\" ] && exit 0",
                                            "",
                                            "nginx=\"/opt/nginx/sbin/nginx\"",
                                            "prog=$(basename $nginx)",
                                            "",
                                            "NGINX_CONF_FILE=\"/opt/nginx/conf/nginx.conf\"",
                                            "",
                                            "lockfile=/var/lock/subsys/nginx",
                                            "",
                                            "start() {",
                                            "    [ -x $nginx ] || exit 5",
                                            "    [ -f $NGINX_CONF_FILE ] || exit 6",
                                            "    echo -n $\"Starting $prog: \"",
                                            "    daemon $nginx -c $NGINX_CONF_FILE",
                                            "    retval=$?",
                                            "    echo",
                                            "    [ $retval -eq 0 ] && touch $lockfile",
                                            "    return $retval",
                                            "}",
                                            "",
                                            "stop() {",
                                            "    echo -n $\"Stopping $prog: \"",
                                            "    killproc $prog -QUIT",
                                            "    retval=$?",
                                            "    echo",
                                            "    [ $retval -eq 0 ] && rm -f $lockfile",
                                            "    return $retval",
                                            "}",
                                            "",
                                            "restart() {",
                                            "    configtest || return $?",
                                            "    stop",
                                            "    start",
                                            "}",
                                            "",
                                            "reload() {",
                                            "    configtest || return $?",
                                            "    echo -n $\"Reloading $prog: \"",
                                            "    killproc $nginx -HUP",
                                            "    RETVAL=$?",
                                            "    echo",
                                            "}",
                                            "",
                                            "force_reload() {",
                                            "    restart",
                                            "}",
                                            "",
                                            "configtest() {",
                                            "  $nginx -t -c $NGINX_CONF_FILE",
                                            "}",
                                            "",
                                            "rh_status() {",
                                            "    status $prog",
                                            "}",
                                            "",
                                            "rh_status_q() {",
                                            "    rh_status >/dev/null 2>&1",
                                            "}",
                                            "",
                                            "case \"$1\" in",
                                            "    start)",
                                            "        rh_status_q && exit 0",
                                            "        $1",
                                            "        ;;",
                                            "    stop)",
                                            "        rh_status_q || exit 0",
                                            "        $1",
                                            "        ;;",
                                            "    restart|configtest)",
                                            "        $1",
                                            "        ;;",
                                            "    reload)",
                                            "        rh_status_q || exit 7",
                                            "        $1",
                                            "        ;;",
                                            "    force-reload)",
                                            "        force_reload",
                                            "        ;;",
                                            "    status)",
                                            "        rh_status",
                                            "        ;;",
                                            "    condrestart|try-restart)",
                                            "        rh_status_q || exit 0",
                                            "            ;;",
                                            "    *)",
                                            "        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"",
                                            "        exit 2",
                                            "esac"
                                        ] ] },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                           "/tmp/mkselfssl.sh": {
                                "content": { "Fn::Join": [ "\n", [
                                            "#!/bin/bash",
											"DIR_SSL_CERT=\"/opt/nginx/ssl/cert\"",
											"DIR_SSL_KEY=\"/opt/nginx/ssl/private\"",

											"SSLNAME=$1",
											"SSLDAYS=$2",

											"if [ -z $1 ]; then",
											"  printf \"Enter the SSL Certificate Name:\"",
											"  read SSLNAME",
											"fi",

											"if [ -z $2 ]; then",
											"  printf \"How many days the Certificate will be valid:\"",
											"  read SSLDAYS",
											"fi",

											"if [[ $SSLDAYS == \"\" ]]; then",
											"  $SSLDAYS = 365",
											"fi",

											"echo \"Creating a new Certificate ...\"",
											"openssl genrsa -des3 -passout pass:x -out $SSLNAME.pass.key 2048",
											"openssl rsa -passin pass:x -in $SSLNAME.pass.key -out $SSLNAME.key",
											"rm -f $SSLNAME.pass.key",
											"openssl req -new -key $SSLNAME.key -out $SSLNAME.csr -subj \"/C=UK/ST=Warwickshire/L=Leamington/O=OrgName/OU=IT Department/CN=example.com\"",
											"openssl x509 -req -days 365 -in $SSLNAME.csr -signkey $SSLNAME.key -out $SSLNAME.crt",
											"# Make directory to place SSL Certificate if it doesn't exists",
											"if [[ ! -d $DIR_SSL_KEY ]]; then",
											"  sudo mkdir -p $DIR_SSL_KEY",
											"fi",

											"if [[ ! -d $DIR_SSL_CERT ]]; then",
											"  sudo mkdir -p $DIR_SSL_CERT",
											"fi",

											"# Place SSL Certificate within defined path",
											"sudo cp $SSLNAME.key $DIR_SSL_KEY/$SSLNAME.key",
											"sudo cp $SSLNAME.crt $DIR_SSL_CERT/$SSLNAME.crt",
											"chmod 755 $DIR_SSL_CERT/$SSLNAME.crt",
											"chmod 755 $DIR_SSL_KEY/$SSLNAME.key"
                                        ] ] },
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            }							
                        },
                        "commands": {                            
                            "b-configure" : {
                                "command" : { "Fn::Join": [ "", ["./configure",
                                        " --prefix=/opt/nginx/ --with-http_stub_status_module --with-http_ssl_module --add-module=/tmp/ngxpostgres/ngx_postgres-", { "Ref" : "NgxPostgresVersion" },
										" --add-module=/tmp/ngxdevel/ngx_devel_kit-", { "Ref" : "NgxDevelVersion" },   										
										" --add-module=/tmp/rdsjson/rds-json-nginx-module-", { "Ref" : "RDSJsonVersion" },
										" --add-module=/tmp/forminput/form-input-nginx-module-", { "Ref" : "FormInputVersion" },										                                     
                                        " > /tmp/nginx-configure.log 2>&1"
                                    ] ]
							
                                },
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            },
                            "c-make" : {
                                "command" : "make",
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            },
                            "d-install" : {
                                "command" : "make install",
                                "cwd" : { "Fn::Join": [ "", ["/tmp/nginx/nginx-", { "Ref" : "NginxVersion" } ] ] }
                            }
                        },
                        "services": {
                            "sysvinit" : {
                                "nginx" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : ["/opt/nginx/conf/nginx.conf"],
                                    "sources" : ["/var/www/html"]
                                }
                            }
                        }
                    }
                }
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap", {
							"Ref": "AWS::Region"
						},
						"AMI"
					]
				},
				"NetworkInterfaces": [{
					"GroupSet": [{
						"Ref": "ProxyServerSecurityGroup"
					}],
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"DeleteOnTermination": "true",
					"SubnetId": {
						"Ref": "SubnetID2"
					}
				}],
				"KeyName": {
					"Ref": "KeyName"
				},
				"Tags" : [ {"Key" : "Name", "Value" : "Proxy Server 2" } ],
				"InstanceType": "t2.micro",
				"IamInstanceProfile": { "Ref": "LogRoleInstanceProfile" },				
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -xe\n",

								"# Get the latest CloudFormation package\n",
								"yum update -y aws-cfn-bootstrap\n",

								"# Start cfn-init\n",
								"/opt/aws/bin/cfn-init -s ", {
									"Ref": "AWS::StackId"
								}, " -r ProxyServerBHost ", " --region ", {
									"Ref": "AWS::Region"
								},
								" || error_exit 'Failed to run cfn-init'\n",

								"# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata\n",
								"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

								"# Create a new username/password for nginx\n",
								"printf ", {
									"Ref": "ProxyUsername"
								},
								":`openssl passwd -apr1 ", {
									"Ref": "ProxyPass"
								},
								"` >> /opt/nginx/conf/kibana.htpasswd\n",
								"# Remove the default location from nginx config\n",
							    "cp -p /tmp/nginx.fc.conf /opt/nginx/conf/nginx.conf\n",								
															
								"# Populate the database\n",
								"/tmp/populatedb.sh\n",
								"# Generate self singed ssl \n",
							    "/tmp/mkselfssl.sh nginx 365\n",
								"# Restart nginx\n",
								"service nginx restart\n",
	                            "# Get the CloudWatch Logs agent\n",
	                            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

	                            "# Install the CloudWatch Logs agent\n",
	                            "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/nginx.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
							    "# pre-warm the nginx logs\n",
							    "curl 127.0.0.1\n",
         					    "curl 127.0.0.1/404\n",								

								"# All done so signal success\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource ProxyServerBHost ",
								"         --region ", {
									"Ref": "AWS::Region"
								}, "\n"
							]
						]
					}
				}
			}
		},
		"ProxyBAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes.",
				"Namespace": "AWS/EC2" ,
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "15",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [ {"Fn::Join" : ["", ["arn:aws:automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
				"Dimensions": [{"Name": "InstanceId","Value": {"Ref": "ProxyServerBHost"}}]
			}
		},

		"ProxyServerEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain":"vpc"
			}
		},
		"ProxyServerEIPAssoc": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId":{"Fn::GetAtt" : [ "ProxyServerEIP", "AllocationId" ]},
				"InstanceId": {"Ref": "ProxyServerHost"}
			}
		},
		"ProxyServerBEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain":"vpc"
			}
		},
		"ProxyServerBEIPAssoc": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId":{"Fn::GetAtt" : [ "ProxyServerBEIP", "AllocationId" ]},
				"InstanceId": {
					"Ref": "ProxyServerBHost"
				}
			}
		},

		"ElasticsearchAWSLogs": {
			"Type": "AWS::Elasticsearch::Domain",
			"Properties": {
				"DomainName": { "Ref": "DOMAINNAME" },
				"ElasticsearchVersion" : "2.3",
				"ElasticsearchClusterConfig": {
					"DedicatedMasterEnabled": "true",
					"InstanceCount": { "Fn::FindInMap": [ "instanceCount", "elasticsearch", { "Ref": "ClusterSize" } ] },
					"ZoneAwarenessEnabled": "true",
					"InstanceType": { "Fn::FindInMap": [ "instanceSizing", "elasticsearch", { "Ref": "ClusterSize" } ] },
					"DedicatedMasterType": { "Fn::FindInMap": [ "MasterSizing", "elasticsearch", { "Ref": "ClusterSize" } ] },
					"DedicatedMasterCount": "2"
				},
				"EBSOptions": {
					"Fn::If" : [ "SizeSmall", {
						"EBSEnabled": true,
						"Iops": 0,
						"VolumeSize": 35,
						"VolumeType": "gp2"
					},
				  {
						"Fn::If" : ["SizeMedium",
							{	"EBSEnabled": false},
							{ "EBSEnabled": false }
					]}]
				},

				"SnapshotOptions": {
					"AutomatedSnapshotStartHour": "1"
				},
				"AccessPolicies": {
					"Version": "2012-10-17",
					"Statement": [{
						"Action": "es:*",
						"Principal": {
							"AWS": "*"
						},
						"Effect": "Allow",
						"Resource": "*",
						"Condition": {
							"IpAddress": {
								"aws:SourceIp": [
									{	"Ref": "ProxyServerEIP"	}, { "Ref": "ProxyServerBEIP"}
								]
							}
						}
					}]
				},
				"AdvancedOptions": {
					"rest.action.multi.allow_explicit_index": "true"
				}
			}
		},
    "LogRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Path": "/",
            "Policies": [
                {
                    "PolicyName": "LogRolePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:Create*",
                                  "logs:PutLogEvents",
                                  "s3:GetObject"
                                ],
                                "Resource": [
                                    "arn:aws:logs:*:*:*",
                                    "arn:aws:s3:::*"
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },
    "LogRoleInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "LogRole"
                }
            ]
        }
    },

     "LogStreamerRole": {
			"Type": "AWS::IAM::Role",
       "Properties": {
         "AssumeRolePolicyDocument": {
           "Version" : "2012-10-17",
           "Statement": [ {
             "Effect": "Allow",
             "Principal": {
               "Service": "lambda.amazonaws.com"
             },
             "Action": "sts:AssumeRole"
           		} ]
         		},
         "Path": "/",
           "Policies": [ {
             "PolicyName": "My_Lambda_Function_Permissions",
             "PolicyDocument": {
               "Version" : "2012-10-17",
 	      			"Statement": [ {
					 		  "Effect": "Allow",
					 		  "Action": [
					 		    "logs:CreateLogGroup",
					 		    "logs:CreateLogStream",
					 		    "logs:PutLogEvents"
					 		  ],
					 		  "Resource": {"Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
					 		}, { "Effect": "Allow", "Action": [ "es:ESHttpPost"
					 		  ],
 		  				"Resource": "arn:aws:es:*:*:*"
 	  					}, {
								"Effect": "Allow",
								"Action": [
									"cloudformation:DescribeStacks",
									"Cloudformation:ListStackResources"
								],
								"Resource":{"Fn::Join" : ["", ["arn:aws:cloudformation:",{"Ref" : "AWS::Region"},":",{"Ref" :"AWS::AccountId"},"*",""]] }
							}
					 	     ]
					           }
					         } ]
					       }
     		 		},

     "LogStreamer": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
             "Handler": "index.handler",
             "Role": {
                 "Fn::GetAtt": [
                     "LogStreamerRole",
                     "Arn"
                 ]
             },
             "Description": "Lambda function for moving log data to AES.",
						 "Code": {
					 		"S3Bucket": {
					 			"Fn::Join": [
					 				"",
					 				[
					 					"solutions-",
					 					{
					 						"Ref": "AWS::Region"
					 					}
					 				]
					 			]
					 		},
					 		"S3Key": "centralized-logging/v1/centralizedLoggingDownload.zip"
					 	},

             "Runtime": "nodejs4.3",
             "Timeout": "300"
         }
     },
     "LambdaInvokePermission": {
       "Type": "AWS::Lambda::Permission",
       "Properties": {
         "FunctionName" : { "Ref" : "LogStreamer" },
         "Action": "lambda:InvokeFunction",
         "Principal":{"Fn::Join" : ["", ["logs.",{"Ref" : "AWS::Region"},".amazonaws.com" ]]},
         "SourceAccount": { "Ref" : "AWS::AccountId" }
       }
     },

      "LogGrouptoLambdaMappingCloudwatchAgent":{
        "Type" : "AWS::Logs::SubscriptionFilter",
        "DependsOn" : "LambdaInvokePermission",
        "Properties" : {
          "DestinationArn" : { "Fn::GetAtt" : [ "LogStreamer" , "Arn" ] },
          "FilterPattern" : { "Fn::FindInMap" : [ "FilterPatternLookup", "Common", "Pattern" ] },
          "LogGroupName" : { "Ref" : "WebServerLogGroup" }
        }
			},

	    "WebServerLogGroup": {
	        "Type": "AWS::Logs::LogGroup",
	        "Properties": {
	            "RetentionInDays": 7
	        }
	    },

			"SolutionHelperRole": {
				"Type": "AWS::IAM::Role",
				"Properties": {
					"AssumeRolePolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Principal": {
									"Service": "lambda.amazonaws.com"
								},
								"Action": "sts:AssumeRole"
							}
						]
					},
					"Path": "/",
					"Policies": [
						{
							"PolicyName": "Custom_Lambda_Loader_Permissions",
							"PolicyDocument": {
								"Version": "2012-10-17",
								"Statement": [
									{
										"Effect": "Allow",
										"Action": [
											"logs:CreateLogGroup",
											"logs:CreateLogStream",
											"logs:PutLogEvents"
										],
										"Resource": {"Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
									}
								]
							}
						}
					]
				}
			}
	
		},

  "Outputs": {      
      "KibanaURL": {
        "Description": "URL of the initial Kibana dashboard",
        "Value": {
					"Fn::Join": [ "", [ "http://", {"Fn::GetAtt" : [ "ELB" , "DNSName" ]}, "/_plugin/kibana/" ]]
      }
		},
			"DomainEndpoint": {
				"Description": "URL of domain endpoint - for lambda function",
				"Value": {
						"Fn::GetAtt": ["ElasticsearchAWSLogs", "DomainEndpoint"]
				}
			}
  }

}

